第一种
1.state 数据
2.jsx 模板
3.数据 + 模板 结合，生成真是的DOM，来显示
4.state 发生改变
5.数据 + 模板 结合，生成真是的DOM，替换原来的DOM

缺点: 
第一次生成完成完整的DOM片段
第二次生成完整的DOM片段
第二次的DOM片段替换第一次的DOM，非常好性能

改进：第二种

1.state 数据
2.jsx 模板
3.数据 + 模板 结合，生成真是的DOM，来显示
4.state 发生改变
5.数据 + 模板 结合，生成真实的DOM，但是不直接替换原始DOM
6.新的DOM和原始的DOM做对比，找差异
7.找出input框发生了变化
8.只用新的DOM中的input元素，替换掉老的DOM中的input元素

缺点：
性能提升并不明显


改进：  第三种

1.state 数据
2.jsx 模板

3.数据 + 模板 结合，生成虚拟DOM（虚拟DOM就是js对象，用来描述真是的DOM）
['div', {id: 'abc'}, ['span', {}, 'hello world']]


4.用虚拟DOM的结构来生成真实的DOM，来显示
<div id='abc'><span>hello world</span></div>

5.state 发生变化

6.数据 + 模板生成新的虚拟DOM
['div', {id: 'abc'}, ['span', {}, 'bye']]

7.比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span中的内容

8.直接操作DOM，改变span中的内容


优点：
1.性能的提升
2.使用跨端应用得以实现，RN


setState为异步的

diff 算法：
同层比对，通过key值来做比较
第一层不一样，直接停止比较，然后删除所有的DOM，生成新的DOM。然后替换原始的DOM


key值设置的原因：提高虚拟DOM比较的性能 
虚拟DOM的比对，通过key值得比较，
如果一致则直接复用，（新的DOM上的key值和旧的key值一致，才能提高性能）


this.setState(()=>{
  异步操作
},() => {
  异步结束以后执行的函数
})


生命周期：
init -》mounting （三个步骤 1,componentWillMount(即将被挂载到页面的时候执行),2.render 3.componentDidMount(会在组件挂载后（插入 DOM 树中）立即调用）
-》updating 